const jwt = require("jsonwebtoken");
const User = require("../models/user.js");

const jwtSecretKey = process.env.JWT_SECRET_KEY;

const authMiddleware = async (req, res, next) => {
  //   console.log(req.headers.authorization);

  //Check1: verify if the token is present
  const token = req.headers.authorization;
  // 400=>Bad request
  // 401=> Unauthorized
  if (!token) {
    return res.status(401).json({
      success: false,
      message: "Please pass the token in Authorization header",
    });
  }

  //Check2: if the jwt is generated by our web app
  try {
    // const isTokenValid = jwt.verify(token, jwtSecretKey);
    // console.log(isTokenValid);
    jwt.verify(token, jwtSecretKey);
  } catch (err) {
    return res.status(400).json({
      success: false,
      message: err,
    });
  }

  //Check3: expiry of the token
  const decodedToken = jwt.decode(token);
  const now = Math.floor(Date.now() / 1000);

  if (now > decodedToken.exp) {
    //token has expired
    return res.status(400).json({
      success: false,
      message: "Token expired, please login again",
    });
  }

  //Check4:Get the user from DB and match the token ID
  const user = await User.findById(decodedToken._id);
  if (user.token != token) {
    return res.status(401).json({
      success: false,
      message: "Invalid JWT",
    });
  }
  req.user = user;
  next();
};

module.exports = authMiddleware;
